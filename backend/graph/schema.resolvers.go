package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.55

import (
	"context"
	prisma "db"
	"fmt"
	. "jwt"
	"log"
	"model"
	"time"

	"github.com/99designs/gqlgen/graphql"
	minio "github.com/minio/minio-go/v7"
)

const (
	bucketName     = "videos"
	minioEndpoint  = "localhost:9000"
	minioAccessKey = "minioadmin"
	minioSecretKey = "minioadmin"
	useSSL         = false
)

func uploadToMinio(ctx context.Context, minioClient *minio.Client, file graphql.Upload) error {
	fileReader := file.File

	objectName := fmt.Sprintf("%d-%s", time.Now().Unix(), file.Filename)

	_, err := minioClient.PutObject(ctx, bucketName, objectName, fileReader, file.Size, minio.PutObjectOptions{
		ContentType: file.ContentType,
	})
	if err != nil {
		return fmt.Errorf("failed to upload file to MinIO: %w", err)
	}
	return nil
}

func (r *mutationResolver) UploadFile(ctx context.Context, file graphql.Upload) (bool, error) {

	err := uploadToMinio(ctx, r.Resolver.MinioClient, file)
	if err != nil {
		log.Printf("Error uploading file: %v", err)
		return false, err
	}

	return true, nil
}

func (r *mutationResolver) Signup(ctx context.Context, email string, password string) (string, error) {
	hashedPassword, err := HashPassword(password)
	if err != nil {
		return "", fmt.Errorf("failed to hash password: %v", err)
	}

	user, err := r.Client.User.CreateOne(
		prisma.User.Email.Set(email),
		prisma.User.Password.Set(hashedPassword),
	).Exec(ctx)

	if err != nil {
		return "", fmt.Errorf("failed to create user: %v", err)
	}

	token, err := CreateJWT(user.ID)
	if err != nil {
		return "", fmt.Errorf("failed to create JWT: %v", err)
	}

	return token, nil
}

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, email string, password string) (string, error) {
	user, err := r.Client.User.FindUnique(
		prisma.User.Email.Equals(email),
	).Exec(ctx)

	if err != nil || !CheckPasswordHash(password, user.Password) {
		return "", fmt.Errorf("invalid credentials")
	}

	token, err := CreateJWT(user.ID)
	if err != nil {
		return "", fmt.Errorf("failed to create JWT: %v", err)
	}

	return token, nil
}

// Me is the resolver for the me field.
func (r *queryResolver) Me(ctx context.Context) (*model.User, error) {
	userID := ctx.Value("userID").(int)

	user, err := r.Client.User.FindUnique(
		prisma.User.ID.Equals(userID),
	).Exec(ctx)
	if err != nil {
		return nil, fmt.Errorf("user not found")
	}

	return &model.User{
		ID:    user.ID,
		Email: user.Email,
	}, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
