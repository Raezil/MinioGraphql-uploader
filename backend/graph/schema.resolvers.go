package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.55

import (
	"context"
	prisma "db"
	"fmt"
	. "jwt"
	"model"
)

// Signup is the resolver for the signup field.
func (r *Resolver) Signup(ctx context.Context, email string, password string) (string, error) {
	hashedPassword, err := HashPassword(password)
	if err != nil {
		return "", fmt.Errorf("failed to hash password: %v", err)
	}

	user, err := r.Client.User.CreateOne(
		prisma.User.Email.Set(email),
		prisma.User.Password.Set(hashedPassword),
	).Exec(ctx)

	if err != nil {
		return "", fmt.Errorf("failed to create user: %v", err)
	}

	token, err := CreateJWT(user.ID)
	if err != nil {
		return "", fmt.Errorf("failed to create JWT: %v", err)
	}

	return token, nil
}

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, email string, password string) (string, error) {
	user, err := r.Client.User.FindUnique(
		prisma.User.Email.Equals(email),
	).Exec(ctx)

	if err != nil || !CheckPasswordHash(password, user.Password) {
		return "", fmt.Errorf("invalid credentials")
	}

	token, err := CreateJWT(user.ID)
	if err != nil {
		return "", fmt.Errorf("failed to create JWT: %v", err)
	}

	return token, nil
}

// Me is the resolver for the me field.
func (r *queryResolver) Me(ctx context.Context) (*model.User, error) {
	userID := ctx.Value("userID").(int)

	user, err := r.Client.User.FindUnique(
		prisma.User.ID.Equals(userID),
	).Exec(ctx)
	if err != nil {
		return nil, fmt.Errorf("user not found")
	}

	return &model.User{
		ID:    user.ID,
		Email: user.Email,
	}, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//  - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//    it when you're done.
//  - You have helper methods in this file. Move them out to keep these resolver files clean.
/*
	func (r *mutationResolver) CreateTodo(ctx context.Context, input model.NewTodo) (*model.Todo, error) {
	panic(fmt.Errorf("not implemented: CreateTodo - createTodo"))
}
func (r *queryResolver) Todos(ctx context.Context) ([]*model.Todo, error) {
	panic(fmt.Errorf("not implemented: Todos - todos"))
}
*/
